#include <EEPROM.h>
#include <WiFi.h>
#include <WiFiManager.h>          // https://github.com/tzapu/WiFiManager WiFi Configuration Magic#include <PubSubClient.h>
#include <PubSubClient.h>
#include <NTPClient.h>
#include <WiFiUdp.h>
#include <Talkie.h>

#include "Freenove_WS2812_Lib_for_ESP32.h"  // RGB

// Talkie phrases
const uint8_t spTHE[]       PROGMEM = {0x08,0xE8,0x3E,0x55,0x01,0xC3,0x86,0x27,0xAF,0x72,0x0D,0x4D,0x97,0xD5,0xBC,0x64,0x3C,0xF2,0x5C,0x51,0xF1,0x93,0x36,0x8F,0x4F,0x59,0x2A,0x42,0x7A,0x32,0xC3,0x64,0xFF,0x3F};
const uint8_t spTIME[]      PROGMEM = {0x0E,0x28,0xAC,0x2D,0x01,0x5D,0xB6,0x0D,0x33,0xF3,0x54,0xB3,0x60,0xBA,0x8C,0x54,0x5C,0xCD,0x2D,0xD4,0x32,0x73,0x0F,0x8E,0x34,0x33,0xCB,0x4A,0x25,0xD4,0x25,0x83,0x2C,0x2B,0xD5,0x50,0x97,0x08,0x32,0xEC,0xD4,0xDC,0x4C,0x33,0xC8,0x70,0x73,0x0F,0x33,0xCD,0x20,0xC3,0xCB,0x43,0xDD,0x3C,0xCD,0x8C,0x20,0x77,0x89,0xF4,0x94,0xB2,0xE2,0xE2,0x35,0x22,0x5D,0xD6,0x4A,0x8A,0x96,0xCC,0x36,0x25,0x2D,0xC9,0x9A,0x7B,0xC2,0x18,0x87,0x24,0x4B,0x1C,0xC9,0x50,0x19,0x92,0x2C,0x71,0x34,0x4B,0x45,0x8A,0x8B,0xC4,0x96,0xB6,0x5A,0x29,0x2A,0x92,0x5A,0xCA,0x53,0x96,0x20,0x05,0x09,0xF5,0x92,0x5D,0xBC,0xE8,0x58,0x4A,0xDD,0xAE,0x73,0xBD,0x65,0x4B,0x8D,0x78,0xCA,0x2B,0x4E,0xD8,0xD9,0xED,0x22,0x20,0x06,0x75,0x00,0x00,0x80,0xFF,0x07};
const uint8_t spIS[]        PROGMEM = {0x21,0x18,0x96,0x38,0xB7,0x14,0x8D,0x60,0x3A,0xA6,0xE8,0x51,0xB4,0xDC,0x2E,0x48,0x7B,0x5A,0xF1,0x70,0x1B,0xA3,0xEC,0x09,0xC6,0xCB,0xEB,0x92,0x3D,0xA7,0x69,0x1F,0xAF,0x71,0x89,0x9C,0xA2,0xB3,0xFC,0xCA,0x35,0x72,0x9A,0xD1,0xF0,0xAB,0x12,0xB3,0x2B,0xC6,0xCD,0x4F,0xCC,0x32,0x26,0x19,0x07,0xDF,0x0B,0x8F,0xB8,0xA4,0xED,0x7C,0xCF,0x23,0x62,0x8B,0x8E,0xF1,0x23,0x0A,0x8B,0x6E,0xCB,0xCE,0xEF,0x54,0x44,0x3C,0xDC,0x08,0x60,0x0B,0x37,0x01,0x1C,0x53,0x26,0x80,0x15,0x4E,0x14,0xB0,0x54,0x2B,0x02,0xA4,0x69,0xFF,0x7F};
const uint8_t spPAUSE1[]    PROGMEM = {0x00,0x00,0x00,0x00,0xFF,0x0F};
const uint8_t spONE[]       PROGMEM = {0xCC,0x67,0x75,0x42,0x59,0x5D,0x3A,0x4F,0x9D,0x36,0x63,0xB7,0x59,0xDC,0x30,0x5B,0x5C,0x23,0x61,0xF3,0xE2,0x1C,0xF1,0xF0,0x98,0xC3,0x4B,0x7D,0x39,0xCA,0x1D,0x2C,0x2F,0xB7,0x15,0xEF,0x70,0x79,0xBC,0xD2,0x46,0x7C,0x52,0xE5,0xF1,0x4A,0x6A,0xB3,0x71,0x47,0xC3,0x2D,0x39,0x34,0x4B,0x23,0x35,0xB7,0x7A,0x55,0x33,0x8F,0x59,0xDC,0xA2,0x44,0xB5,0xBC,0x66,0x72,0x8B,0x64,0xF5,0xF6,0x98,0xC1,0x4D,0x42,0xD4,0x27,0x62,0x38,0x2F,0x4A,0xB6,0x9C,0x88,0x68,0xBC,0xA6,0x95,0xF8,0x5C,0xA1,0x09,0x86,0x77,0x91,0x11,0x5B,0xFF,0x0F};
const uint8_t spTWO[]       PROGMEM = {0x0E,0x38,0x6E,0x25,0x00,0xA3,0x0D,0x3A,0xA0,0x37,0xC5,0xA0,0x05,0x9E,0x56,0x35,0x86,0xAA,0x5E,0x8C,0xA4,0x82,0xB2,0xD7,0x74,0x31,0x22,0x69,0xAD,0x1C,0xD3,0xC1,0xD0,0xFA,0x28,0x2B,0x2D,0x47,0xC3,0x1B,0xC2,0xC4,0xAE,0xC6,0xCD,0x9C,0x48,0x53,0x9A,0xFF,0x0F};
const uint8_t spTHREE[]     PROGMEM = {0x02,0xD8,0x2E,0x9C,0x01,0xDB,0xA6,0x33,0x60,0xFB,0x30,0x01,0xEC,0x20,0x12,0x8C,0xE4,0xD8,0xCA,0x32,0x96,0x73,0x63,0x41,0x39,0x89,0x98,0xC1,0x4D,0x0D,0xED,0xB0,0x2A,0x05,0x37,0x0F,0xB4,0xA5,0xAE,0x5C,0xDC,0x36,0xD0,0x83,0x2F,0x4A,0x71,0x7B,0x03,0xF7,0x38,0x59,0xCD,0xED,0x1E,0xB4,0x6B,0x14,0x35,0xB7,0x6B,0x94,0x99,0x91,0xD5,0xDC,0x26,0x48,0x77,0x4B,0x66,0x71,0x1B,0x21,0xDB,0x2D,0x8A,0xC9,0x6D,0x88,0xFC,0x26,0x28,0x3A,0xB7,0x21,0xF4,0x1F,0xA3,0x65,0xBC,0x02,0x38,0xBB,0x3D,0x8E,0xF0,0x2B,0xE2,0x08,0xB7,0x34,0xFF,0x0F};
const uint8_t spFOUR[]      PROGMEM = {0x0C,0x18,0xB6,0x9A,0x01,0xC3,0x75,0x09,0x60,0xD8,0x0E,0x09,0x30,0xA0,0x9B,0xB6,0xA0,0xBB,0xB0,0xAA,0x16,0x4E,0x82,0xEB,0xEA,0xA9,0xFA,0x59,0x49,0x9E,0x59,0x23,0x9A,0x27,0x3B,0x78,0x66,0xAE,0x4A,0x9C,0x9C,0xE0,0x99,0xD3,0x2A,0xBD,0x72,0x92,0xEF,0xE6,0x88,0xE4,0x45,0x4D,0x7E,0x98,0x2D,0x62,0x67,0x37,0xF9,0xA1,0x37,0xA7,0x6C,0x94,0xE4,0xC7,0x1E,0xDC,0x3C,0xA5,0x83,0x1F,0x8B,0xEB,0x52,0x0E,0x0E,0x7E,0x2E,0x4E,0xC7,0x31,0xD2,0x79,0xA5,0x3A,0x0D,0xD9,0xC4,0xFF,0x07};
const uint8_t spFIVE[]      PROGMEM = {0x02,0xE8,0x3E,0x8C,0x01,0xDD,0x65,0x08,0x60,0x98,0x4C,0x06,0x34,0x93,0xCE,0x80,0xE6,0xDA,0x9A,0x14,0x6B,0xAA,0x47,0xD1,0x5E,0x56,0xAA,0x6D,0x56,0xCD,0x78,0xD9,0xA9,0x1C,0x67,0x05,0x83,0xE1,0xA4,0xBA,0x38,0xEE,0x16,0x86,0x9B,0xFA,0x60,0x87,0x5B,0x18,0x6E,0xEE,0x8B,0x1D,0x6E,0x61,0xB9,0x69,0x36,0x65,0xBA,0x8D,0xE5,0xE5,0x3E,0x1C,0xE9,0x0E,0x96,0x9B,0x5B,0xAB,0x95,0x2B,0x58,0x6E,0xCE,0xE5,0x3A,0x6A,0xF3,0xB8,0x35,0x84,0x7B,0x05,0xA3,0xE3,0x36,0xEF,0x92,0x19,0xB4,0x86,0xDB,0xB4,0x69,0xB4,0xD1,0x2A,0x4E,0x65,0x9A,0x99,0xCE,0x28,0xD9,0x85,0x71,0x4C,0x18,0x6D,0x67,0x47,0xC6,0x5E,0x53,0x4A,0x9C,0xB5,0xE2,0x85,0x45,0x26,0xFE,0x7F};
const uint8_t spSIX[]       PROGMEM = {0x0E,0xD8,0xAE,0xDD,0x03,0x0E,0x38,0xA6,0xD2,0x01,0xD3,0xB4,0x2C,0xAD,0x6A,0x35,0x9D,0xB1,0x7D,0xDC,0xEE,0xC4,0x65,0xD7,0xF1,0x72,0x47,0x24,0xB3,0x19,0xD9,0xD9,0x05,0x70,0x40,0x49,0xEA,0x02,0x98,0xBE,0x42,0x01,0xDF,0xA4,0x69,0x40,0x00,0xDF,0x95,0xFC,0x3F};
const uint8_t spSEVEN[]     PROGMEM = {0x02,0xB8,0x3A,0x8C,0x01,0xDF,0xA4,0x73,0x40,0x01,0x47,0xB9,0x2F,0x33,0x3B,0x73,0x5F,0x53,0x7C,0xEC,0x9A,0xC5,0x63,0xD5,0xD1,0x75,0xAE,0x5B,0xFC,0x64,0x5C,0x35,0x87,0x91,0xF1,0x83,0x36,0xB5,0x68,0x55,0xC5,0x6F,0xDA,0x45,0x2D,0x1C,0x2D,0xB7,0x38,0x37,0x9F,0x60,0x3C,0xBC,0x9A,0x85,0xA3,0x25,0x66,0xF7,0x8A,0x57,0x1C,0xA9,0x67,0x56,0xCA,0x5E,0xF0,0xB2,0x16,0xB2,0xF1,0x89,0xCE,0x8B,0x92,0x25,0xC7,0x2B,0x33,0xCF,0x48,0xB1,0x99,0xB4,0xF3,0xFF};
const uint8_t spEIGHT[]     PROGMEM = {0xC3,0x6C,0x86,0xB3,0x27,0x6D,0x0F,0xA7,0x48,0x99,0x4E,0x55,0x3C,0xBC,0x22,0x65,0x36,0x4D,0xD1,0xF0,0x32,0xD3,0xBE,0x34,0xDA,0xC3,0xEB,0x82,0xE2,0xDA,0x65,0x35,0xAF,0x31,0xF2,0x6B,0x97,0x95,0xBC,0x86,0xD8,0x6F,0x82,0xA6,0x73,0x0B,0xC6,0x9E,0x72,0x99,0xCC,0xCB,0x02,0xAD,0x3C,0x9A,0x10,0x60,0xAB,0x62,0x05,0x2C,0x37,0x84,0x00,0xA9,0x73,0x00,0x00,0xFE,0x1F};
const uint8_t spNINE[]      PROGMEM = {0xCC,0xA1,0x26,0xBB,0x83,0x93,0x18,0xCF,0x4A,0xAD,0x2E,0x31,0xED,0x3C,0xA7,0x24,0x26,0xC3,0x54,0xF1,0x92,0x64,0x8B,0x8A,0x98,0xCB,0x2B,0x2E,0x34,0x53,0x2D,0x0E,0x2F,0x57,0xB3,0x0C,0x0D,0x3C,0xBC,0x3C,0x4C,0x4B,0xCA,0xF4,0xF0,0x72,0x0F,0x6E,0x49,0x53,0xCD,0xCB,0x53,0x2D,0x35,0x4D,0x0F,0x2F,0x0F,0xD7,0x0C,0x0D,0x3D,0xBC,0xDC,0x4D,0xD3,0xDD,0xC2,0xF0,0x72,0x52,0x4F,0x57,0x9B,0xC3,0xAB,0x89,0xBD,0x42,0x2D,0x0F,0xAF,0x5A,0xD1,0x71,0x91,0x55,0xBC,0x2C,0xC5,0x3B,0xD8,0x65,0xF2,0x82,0x94,0x18,0x4E,0x3B,0xC1,0x73,0x42,0x32,0x33,0x15,0x45,0x4F,0x79,0x52,0x6A,0x55,0xA6,0xA3,0xFF,0x07};
const uint8_t spTEN[]       PROGMEM = {0x0E,0xD8,0xB1,0xDD,0x01,0x3D,0xA8,0x24,0x7B,0x04,0x27,0x76,0x77,0xDC,0xEC,0xC2,0xC5,0x23,0x84,0xCD,0x72,0x9A,0x51,0xF7,0x62,0x45,0xC7,0xEB,0x4E,0x35,0x4A,0x14,0x2D,0xBF,0x45,0xB6,0x0A,0x75,0xB8,0xFC,0x16,0xD9,0x2A,0xD9,0xD6,0x0A,0x5A,0x10,0xCD,0xA2,0x48,0x23,0xA8,0x81,0x35,0x4B,0x2C,0xA7,0x20,0x69,0x0A,0xAF,0xB6,0x15,0x82,0xA4,0x29,0x3C,0xC7,0x52,0x08,0xA2,0x22,0xCF,0x68,0x4B,0x2E,0xF0,0x8A,0xBD,0xA3,0x2C,0xAB,0x40,0x1B,0xCE,0xAA,0xB2,0x6C,0x82,0x40,0x4D,0x7D,0xC2,0x89,0x88,0x8A,0x61,0xCC,0x74,0xD5,0xFF,0x0F};
const uint8_t spELEVEN[]    PROGMEM = {0xC3,0xCD,0x76,0x5C,0xAE,0x14,0x0F,0x37,0x9B,0x71,0xDE,0x92,0x55,0xBC,0x2C,0x27,0x70,0xD3,0x76,0xF0,0x83,0x5E,0xA3,0x5E,0x5A,0xC1,0xF7,0x61,0x58,0xA7,0x19,0x35,0x3F,0x99,0x31,0xDE,0x52,0x74,0xFC,0xA2,0x26,0x64,0x4B,0xD1,0xF1,0xAB,0xAE,0xD0,0x2D,0xC5,0xC7,0x2F,0x36,0xDD,0x27,0x15,0x0F,0x3F,0xD9,0x08,0x9F,0x62,0xE4,0xC2,0x2C,0xD4,0xD8,0xD3,0x89,0x0B,0x1B,0x57,0x11,0x0B,0x3B,0xC5,0xCF,0xD6,0xCC,0xC6,0x64,0x35,0xAF,0x18,0x73,0x1F,0xA1,0x5D,0xBC,0x62,0x45,0xB3,0x45,0x51,0xF0,0xA2,0x62,0xAB,0x4A,0x5B,0xC9,0x4B,0x8A,0x2D,0xB3,0x6C,0x06,0x2F,0x29,0xB2,0xAC,0x8A,0x18,0xBC,0x28,0xD9,0xAA,0xD2,0x92,0xF1,0xBC,0xE0,0x98,0x8C,0x48,0xCC,0x17,0x52,0xA3,0x27,0x6D,0x93,0xD0,0x4B,0x8E,0x0E,0x77,0x02,0x00,0xFF,0x0F};
const uint8_t spTWELVE[]    PROGMEM = {0x06,0x28,0x46,0xD3,0x01,0x25,0x06,0x13,0x20,0xBA,0x70,0x70,0xB6,0x79,0xCA,0x36,0xAE,0x28,0x38,0xE1,0x29,0xC5,0x35,0xA3,0xE6,0xC4,0x16,0x6A,0x53,0x8C,0x97,0x9B,0x72,0x86,0x4F,0x28,0x1A,0x6E,0x0A,0x59,0x36,0xAE,0x68,0xF8,0x29,0x67,0xFA,0x06,0xA3,0x16,0xC4,0x96,0xE6,0x53,0xAC,0x5A,0x9C,0x56,0x72,0x77,0x31,0x4E,0x49,0x5C,0x8D,0x5B,0x29,0x3B,0x24,0x61,0x1E,0x6C,0x9B,0x6C,0x97,0xF8,0xA7,0x34,0x19,0x92,0x4C,0x62,0x9E,0x72,0x65,0x58,0x12,0xB1,0x7E,0x09,0xD5,0x2E,0x53,0xC5,0xBA,0x36,0x6B,0xB9,0x2D,0x17,0x05,0xEE,0x9A,0x6E,0x8E,0x05,0x50,0x6C,0x19,0x07,0x18,0x50,0xBD,0x3B,0x01,0x92,0x08,0x41,0x40,0x10,0xA6,0xFF,0x0F};
const uint8_t spTHIRTEEN[]  PROGMEM = {0x08,0xE8,0x2C,0x15,0x01,0x43,0x07,0x13,0xE0,0x98,0xB4,0xA6,0x35,0xA9,0x1E,0xDE,0x56,0x8E,0x53,0x9C,0x7A,0xE7,0xCA,0x5E,0x76,0x8D,0x94,0xE5,0x2B,0xAB,0xD9,0xB5,0x62,0xA4,0x9C,0xE4,0xE6,0xB4,0x41,0x1E,0x7C,0xB6,0x93,0xD7,0x16,0x99,0x5A,0xCD,0x61,0x76,0x55,0xC2,0x91,0x61,0x1B,0xC0,0x01,0x5D,0x85,0x05,0xE0,0x68,0x51,0x07,0x1C,0xA9,0x64,0x80,0x1D,0x4C,0x9C,0x95,0x88,0xD4,0x04,0x3B,0x4D,0x4E,0x21,0x5C,0x93,0xA8,0x26,0xB9,0x05,0x4B,0x6E,0xA0,0xE2,0xE4,0x57,0xC2,0xB9,0xC1,0xB2,0x93,0x5F,0x09,0xD7,0x24,0xCB,0x4E,0x41,0x25,0x54,0x1D,0x62,0x3B,0x05,0x8D,0x52,0x57,0xAA,0xAD,0x10,0x24,0x26,0xE3,0xE1,0x36,0x5D,0x10,0x85,0xB4,0x97,0x85,0x72,0x41,0x14,0x52,0x5E,0x1A,0xCA,0xF9,0x91,0x6B,0x7A,0x5B,0xC4,0xE0,0x17,0x2D,0x54,0x1D,0x92,0x8C,0x1F,0x25,0x4B,0x8F,0xB2,0x16,0x41,0xA1,0x4A,0x3E,0xE6,0xFA,0xFF,0x01};
const uint8_t spFOURTEEN[]  PROGMEM = {0x0C,0x58,0xAE,0x5C,0x01,0xD9,0x87,0x07,0x51,0xB7,0x25,0xB3,0x8A,0x15,0x2C,0xF7,0x1C,0x35,0x87,0x4D,0xB2,0xDD,0x53,0xCE,0x28,0x2B,0xC9,0x0E,0x97,0x2D,0xBD,0x2A,0x17,0x27,0x76,0x8E,0xD2,0x9A,0x6C,0x80,0x94,0x71,0x00,0x00,0x02,0xB0,0x58,0x58,0x00,0x9E,0x0B,0x0A,0xC0,0xB2,0xCE,0xC1,0xC8,0x98,0x7A,0x52,0x95,0x24,0x2B,0x11,0xED,0x36,0xD4,0x92,0xDC,0x4C,0xB5,0xC7,0xC8,0x53,0xF1,0x2A,0xE5,0x1A,0x17,0x55,0xC5,0xAF,0x94,0xBB,0xCD,0x1C,0x26,0xBF,0x52,0x9A,0x72,0x53,0x98,0xFC,0xC2,0x68,0xD2,0x4D,0x61,0xF0,0xA3,0x90,0xB6,0xD6,0x50,0xC1,0x8F,0x42,0xDA,0x4A,0x43,0x39,0x3F,0x48,0x2D,0x6B,0x33,0xF9,0xFF};
const uint8_t spFIFTEEN[]   PROGMEM = {0x08,0xE8,0x2A,0x0D,0x01,0xDD,0xBA,0x31,0x60,0x6A,0xF7,0xA0,0xAE,0x54,0xAA,0x5A,0x76,0x97,0xD9,0x34,0x69,0xEF,0x32,0x1E,0x66,0xE1,0xE2,0xB3,0x43,0xA9,0x18,0x55,0x92,0x4E,0x37,0x2D,0x67,0x6F,0xDF,0xA2,0x5A,0xB6,0x04,0x30,0x55,0xA8,0x00,0x86,0x09,0xE7,0x00,0x01,0x16,0x17,0x05,0x70,0x40,0x57,0xE5,0x01,0xF8,0x21,0x34,0x00,0xD3,0x19,0x33,0x80,0x89,0x9A,0x62,0x34,0x4C,0xD5,0x49,0xAE,0x8B,0x53,0x09,0xF7,0x26,0xD9,0x6A,0x7E,0x23,0x5C,0x13,0x12,0xB3,0x04,0x9D,0x50,0x4F,0xB1,0xAD,0x14,0x15,0xC2,0xD3,0xA1,0xB6,0x42,0x94,0xA8,0x8C,0x87,0xDB,0x74,0xB1,0x70,0x59,0xE1,0x2E,0xC9,0xC5,0x81,0x5B,0x55,0xA4,0x4C,0x17,0x47,0xC1,0x6D,0xE3,0x81,0x53,0x9C,0x84,0x6A,0x46,0xD9,0x4C,0x51,0x31,0x42,0xD9,0x66,0xC9,0x44,0x85,0x29,0x6A,0x9B,0xAD,0xFF,0x07};
const uint8_t spSIXTEEN[]   PROGMEM = {0x0A,0x58,0x5A,0x5D,0x00,0x93,0x97,0x0B,0x60,0xA9,0x48,0x05,0x0C,0x15,0xAE,0x80,0xAD,0x3D,0x14,0x30,0x7D,0xD9,0x50,0x92,0x92,0xAC,0x0D,0xC5,0xCD,0x2A,0x82,0xAA,0x3B,0x98,0x04,0xB3,0x4A,0xC8,0x9A,0x90,0x05,0x09,0x68,0x51,0xD4,0x01,0x23,0x9F,0x1A,0x60,0xA9,0x12,0x03,0xDC,0x50,0x81,0x80,0x22,0xDC,0x20,0x00,0xCB,0x06,0x3A,0x60,0x16,0xE3,0x64,0x64,0x42,0xDD,0xCD,0x6A,0x8A,0x5D,0x28,0x75,0x07,0xA9,0x2A,0x5E,0x65,0x34,0xED,0x64,0xBB,0xF8,0x85,0xF2,0x94,0x8B,0xAD,0xE4,0x37,0x4A,0x5B,0x21,0xB6,0x52,0x50,0x19,0xAD,0xA7,0xD8,0x4A,0x41,0x14,0xDA,0x5E,0x12,0x3A,0x04,0x91,0x4B,0x7B,0x69,0xA8,0x10,0x24,0x2E,0xE5,0xA3,0x81,0x52,0x90,0x94,0x5A,0x55,0x98,0x32,0x41,0x50,0xCC,0x93,0x2E,0x47,0x85,0x89,0x1B,0x5B,0x5A,0x62,0x04,0x44,0xE3,0x02,0x80,0x80,0x64,0xDD,0xFF,0x1F};
const uint8_t spSEVENTEEN[] PROGMEM = {0x02,0x98,0x3A,0x42,0x00,0x5B,0xA6,0x09,0x60,0xDB,0x52,0x06,0x1C,0x93,0x29,0x80,0xA9,0x52,0x87,0x9A,0xB5,0x99,0x4F,0xC8,0x3E,0x46,0xD6,0x5E,0x7E,0x66,0xFB,0x98,0xC5,0x5A,0xC6,0x9A,0x9C,0x63,0x15,0x6B,0x11,0x13,0x8A,0x9C,0x97,0xB9,0x9A,0x5A,0x39,0x71,0xEE,0xD2,0x29,0xC2,0xA6,0xB8,0x58,0x59,0x99,0x56,0x14,0xA3,0xE1,0x26,0x19,0x19,0xE3,0x8C,0x93,0x17,0xB4,0x46,0xB5,0x88,0x71,0x9E,0x97,0x9E,0xB1,0x2C,0xC5,0xF8,0x56,0xC4,0x58,0xA3,0x1C,0xE1,0x33,0x9D,0x13,0x41,0x8A,0x43,0x58,0xAD,0x95,0xA9,0xDB,0x36,0xC0,0xD1,0xC9,0x0E,0x58,0x4E,0x45,0x01,0x23,0xA9,0x04,0x37,0x13,0xAE,0x4D,0x65,0x52,0x82,0xCA,0xA9,0x37,0x99,0x4D,0x89,0xBA,0xC0,0xBC,0x14,0x36,0x25,0xEA,0x1C,0x73,0x52,0x1D,0x97,0xB8,0x33,0xAC,0x0E,0x75,0x9C,0xE2,0xCE,0xB0,0xDA,0xC3,0x51,0x4A,0x1A,0xA5,0xCA,0x70,0x5B,0x21,0xCE,0x4C,0x26,0xD2,0x6C,0xBA,0x38,0x71,0x2E,0x1F,0x2D,0xED,0xE2,0x24,0xB8,0xBC,0x3D,0x52,0x88,0xAB,0x50,0x8E,0xA8,0x48,0x22,0x4E,0x42,0xA0,0x26,0x55,0xFD,0x3F};
const uint8_t spEIGHTEEN[]  PROGMEM = {0x2E,0x9C,0xD1,0x4D,0x54,0xEC,0x2C,0xBF,0x1B,0x8A,0x99,0x70,0x7C,0xFC,0x2E,0x29,0x6F,0x52,0xF6,0xF1,0xBA,0x20,0xBF,0x36,0xD9,0xCD,0xED,0x0C,0xF3,0x27,0x64,0x17,0x73,0x2B,0xA2,0x99,0x90,0x65,0xEC,0xED,0x40,0x73,0x32,0x12,0xB1,0xAF,0x30,0x35,0x0B,0xC7,0x00,0xE0,0x80,0xAE,0xDD,0x1C,0x70,0x43,0xAA,0x03,0x86,0x51,0x36,0xC0,0x30,0x64,0xCE,0x4C,0x98,0xFB,0x5C,0x65,0x07,0xAF,0x10,0xEA,0x0B,0x66,0x1B,0xFC,0x46,0xA8,0x3E,0x09,0x4D,0x08,0x2A,0xA6,0x3E,0x67,0x36,0x21,0x2A,0x98,0x67,0x9D,0x15,0xA7,0xA8,0x60,0xEE,0xB6,0x94,0x99,0xA2,0x4A,0x78,0x22,0xC2,0xA6,0x8B,0x8C,0x8E,0xCC,0x4C,0x8A,0x2E,0x8A,0x4C,0xD3,0x57,0x03,0x87,0x28,0x71,0x09,0x1F,0x2B,0xE4,0xA2,0xC4,0xC5,0x6D,0xAD,0x54,0x88,0xB2,0x63,0xC9,0xF2,0x50,0x2E,0x8A,0x4A,0x38,0x4A,0xEC,0x88,0x28,0x08,0xE3,0x28,0x49,0xF3,0xFF};
const uint8_t spNINETEEN[]  PROGMEM = {0xC2,0xEA,0x8A,0x95,0x2B,0x6A,0x05,0x3F,0x71,0x71,0x5F,0x0D,0x12,0xFC,0x28,0x25,0x62,0x35,0xF0,0xF0,0xB3,0x48,0x1E,0x0F,0xC9,0xCB,0x2F,0x45,0x7C,0x2C,0x25,0x1F,0xBF,0x14,0xB3,0x2C,0xB5,0x75,0xFC,0x5A,0x5C,0xA3,0x5D,0xE1,0xF1,0x7A,0x76,0xB3,0x4E,0x45,0xC7,0xED,0x96,0x23,0x3B,0x18,0x37,0x7B,0x18,0xCC,0x09,0x51,0x13,0x4C,0xAB,0x6C,0x4C,0x4B,0x96,0xD2,0x49,0xAA,0x36,0x0B,0xC5,0xC2,0x20,0x26,0x27,0x35,0x63,0x09,0x3D,0x30,0x8B,0xF0,0x48,0x5C,0xCA,0x61,0xDD,0xCB,0xCD,0x91,0x03,0x8E,0x4B,0x76,0xC0,0xCC,0x4D,0x06,0x98,0x31,0x31,0x98,0x99,0x70,0x6D,0x2A,0xA3,0xE4,0x16,0xCA,0xBD,0xCE,0x5C,0x92,0x57,0x28,0xCF,0x09,0x69,0x2E,0x7E,0xA5,0x3C,0x63,0xA2,0x30,0x05,0x95,0xD2,0x74,0x98,0xCD,0x14,0x54,0xCA,0x53,0xA9,0x96,0x52,0x50,0x28,0x6F,0xBA,0xCB,0x0C,0x41,0x50,0xDE,0x65,0x2E,0xD3,0x05,0x89,0x4B,0x7B,0x6B,0x20,0x17,0x44,0xAE,0xED,0x23,0x81,0x52,0x90,0x85,0x73,0x57,0xD0,0x72,0x41,0xB1,0x02,0xDE,0x2E,0xDB,0x04,0x89,0x05,0x79,0xBB,0x62,0xE5,0x76,0x11,0xCA,0x61,0x0E,0xFF,0x1F};
const uint8_t spTWENTY[]    PROGMEM = {0x01,0x98,0xD1,0xC2,0x00,0xCD,0xA4,0x32,0x20,0x79,0x13,0x04,0x28,0xE7,0x92,0xDC,0x70,0xCC,0x5D,0xDB,0x76,0xF3,0xD2,0x32,0x0B,0x0B,0x5B,0xC3,0x2B,0xCD,0xD4,0xDD,0x23,0x35,0xAF,0x44,0xE1,0xF0,0xB0,0x6D,0x3C,0xA9,0xAD,0x3D,0x35,0x0E,0xF1,0x0C,0x8B,0x28,0xF7,0x34,0x01,0x68,0x22,0xCD,0x00,0xC7,0xA4,0x04,0xBB,0x32,0xD6,0xAC,0x56,0x9C,0xDC,0xCA,0x28,0x66,0x53,0x51,0x70,0x2B,0xA5,0xBC,0x0D,0x9A,0xC1,0xEB,0x14,0x73,0x37,0x29,0x19,0xAF,0x33,0x8C,0x3B,0xA7,0x24,0xBC,0x42,0xB0,0xB7,0x59,0x09,0x09,0x3C,0x96,0xE9,0xF4,0x58,0xFF,0x0F};
const uint8_t spTHIRTY[]    PROGMEM = {0x08,0x98,0xD6,0x15,0x01,0x43,0xBB,0x0A,0x20,0x1B,0x8B,0xE5,0x16,0xA3,0x1E,0xB6,0xB6,0x96,0x97,0x3C,0x57,0xD4,0x2A,0x5E,0x7E,0x4E,0xD8,0xE1,0x6B,0x7B,0xF8,0x39,0x63,0x0D,0x9F,0x95,0xE1,0xE7,0x4C,0x76,0xBC,0x91,0x5B,0x90,0x13,0xC6,0x68,0x57,0x4E,0x41,0x8B,0x10,0x5E,0x1D,0xA9,0x44,0xD3,0xBA,0x47,0xB8,0xDD,0xE4,0x35,0x86,0x11,0x93,0x94,0x92,0x5F,0x29,0xC7,0x4C,0x30,0x0C,0x41,0xC5,0x1C,0x3B,0x2E,0xD3,0x05,0x15,0x53,0x6C,0x07,0x4D,0x15,0x14,0x8C,0xB5,0xC9,0x6A,0x44,0x90,0x10,0x4E,0x9A,0xB6,0x21,0x81,0x23,0x3A,0x91,0x91,0xE8,0xFF,0x01};
const uint8_t spFOURTY[]    PROGMEM = {0x04,0x18,0xB6,0x4C,0x00,0xC3,0x56,0x30,0xA0,0xE8,0xF4,0xA0,0x98,0x99,0x62,0x91,0xAE,0x83,0x6B,0x77,0x89,0x78,0x3B,0x09,0xAE,0xBD,0xA6,0x1E,0x63,0x3B,0x79,0x7E,0x71,0x5A,0x8F,0x95,0xE6,0xA5,0x4A,0x69,0xB9,0x4E,0x8A,0x5F,0x12,0x56,0xE4,0x58,0x69,0xE1,0x36,0xA1,0x69,0x2E,0x2B,0xF9,0x95,0x93,0x55,0x17,0xED,0xE4,0x37,0xC6,0xBA,0x93,0xB2,0x92,0xDF,0x19,0xD9,0x6E,0xC8,0x0A,0xFE,0x60,0xE8,0x37,0x21,0xC9,0xF9,0x8D,0x61,0x5F,0x32,0x13,0xE7,0x17,0x4C,0xD3,0xC6,0xB1,0x94,0x97,0x10,0x8F,0x8B,0xAD,0x11,0x7E,0xA1,0x9A,0x26,0x92,0xF6,0xFF,0x01};
const uint8_t spFIFTY[]     PROGMEM = {0x08,0xE8,0x2E,0x84,0x00,0x23,0x84,0x13,0x60,0x38,0x95,0xA5,0x0F,0xCF,0xE2,0x79,0x8A,0x8F,0x37,0x02,0xB3,0xD5,0x2A,0x6E,0x5E,0x93,0x94,0x79,0x45,0xD9,0x05,0x5D,0x0A,0xB9,0x97,0x63,0x02,0x74,0xA7,0x82,0x80,0xEE,0xC3,0x10,0xD0,0x7D,0x28,0x03,0x6E,0x14,0x06,0x70,0xE6,0x0A,0xC9,0x9A,0x4E,0x37,0xD9,0x95,0x51,0xCE,0xBA,0xA2,0x14,0x0C,0x81,0x36,0x1B,0xB2,0x5C,0x30,0x38,0xFA,0x9C,0xC9,0x32,0x41,0xA7,0x18,0x3B,0xA2,0x48,0x04,0x05,0x51,0x4F,0x91,0x6D,0x12,0x04,0x20,0x9B,0x61,0x89,0xFF,0x1F};
const uint8_t spGOOD[]      PROGMEM = {0x0A,0x28,0xCD,0x34,0x20,0xD9,0x1A,0x45,0x74,0xE4,0x66,0x24,0xAD,0xBA,0xB1,0x8C,0x9B,0x91,0xA5,0x64,0xE6,0x98,0x21,0x16,0x0B,0x96,0x9B,0x4C,0xE5,0xFF,0x01};
const uint8_t spMORNING[]   PROGMEM = {0xCE,0x08,0x52,0x2A,0x35,0x5D,0x39,0x53,0x29,0x5B,0xB7,0x0A,0x15,0x0C,0xEE,0x2A,0x42,0x56,0x66,0xD2,0x55,0x2E,0x37,0x2F,0xD9,0x45,0xB3,0xD3,0xC5,0xCA,0x6D,0x27,0xD5,0xEE,0x50,0xF5,0x50,0x94,0x14,0x77,0x2D,0xD8,0x5D,0x49,0x92,0xFD,0xB1,0x64,0x2F,0xA9,0x49,0x0C,0x93,0x4B,0xAD,0x19,0x17,0x3E,0x66,0x1E,0xF1,0xA2,0x5B,0x84,0xE2,0x29,0x8F,0x8B,0x72,0x10,0xB5,0xB1,0x2E,0x4B,0xD4,0x45,0x89,0x4A,0xEC,0x5C,0x95,0x14,0x2B,0x8A,0x9C,0x34,0x52,0x5D,0xBC,0xCC,0xB5,0x3B,0x49,0x69,0x89,0x87,0xC1,0x98,0x56,0x3A,0x21,0x2B,0x82,0x67,0xCC,0x5C,0x85,0xB5,0x4A,0x8A,0xF6,0x64,0xA9,0x96,0xC4,0x69,0x3C,0x52,0x81,0x58,0x1C,0x97,0xF6,0x0E,0x1B,0xCC,0x0D,0x42,0x32,0xAA,0x65,0x12,0x67,0xD4,0x6A,0x61,0x52,0xFC,0xFF};
//uint8_t spAFTERNOON[] PROGMEM = {0xC7,0xCE,0xCE,0x3A,0xCB,0x58,0x1F,0x3B,0x07,0x9D,0x28,0x71,0xB4,0xAC,0x9C,0x74,0x5A,0x42,0x55,0x33,0xB2,0x93,0x0A,0x09,0xD4,0xC5,0x9A,0xD6,0x44,0x45,0xE3,0x38,0x60,0x9A,0x32,0x05,0xF4,0x18,0x01,0x09,0xD8,0xA9,0xC2,0x00,0x5E,0xCA,0x24,0xD5,0x5B,0x9D,0x4A,0x95,0xEA,0x34,0xEE,0x63,0x92,0x5C,0x4D,0xD0,0xA4,0xEE,0x58,0x0C,0xB9,0x4D,0xCD,0x42,0xA2,0x3A,0x24,0x37,0x25,0x8A,0xA8,0x8E,0xA0,0x53,0xE4,0x28,0x23,0x26,0x13,0x72,0x91,0xA2,0x76,0xBB,0x72,0x38,0x45,0x0A,0x46,0x63,0xCA,0x69,0x27,0x39,0x58,0xB1,0x8D,0x60,0x1C,0x34,0x1B,0x34,0xC3,0x55,0x8E,0x73,0x45,0x2D,0x4F,0x4A,0x3A,0x26,0x10,0xA1,0xCA,0x2D,0xE9,0x98,0x24,0x0A,0x1E,0x6D,0x97,0x29,0xD2,0xCC,0x71,0xA2,0xDC,0x86,0xC8,0x12,0xA7,0x8E,0x08,0x85,0x22,0x8D,0x9C,0x43,0xA7,0x12,0xB2,0x2E,0x50,0x09,0xEF,0x51,0xC5,0xBA,0x28,0x58,0xAD,0xDB,0xE1,0xFF,0x03};
//uint8_t spEVENING[]   PROGMEM = {0xCD,0x6D,0x98,0x73,0x47,0x65,0x0D,0x6D,0x10,0xB2,0x5D,0x93,0x35,0x94,0xC1,0xD0,0x76,0x4D,0x66,0x93,0xA7,0x04,0xBD,0x71,0xD9,0x45,0xAE,0x92,0xD5,0xAC,0x53,0x07,0x6D,0xA5,0x76,0x63,0x51,0x92,0xD4,0xA1,0x83,0xD4,0xCB,0xB2,0x51,0x88,0xCD,0xF5,0x50,0x45,0xCE,0xA2,0x2E,0x27,0x28,0x54,0x15,0x37,0x0A,0xCF,0x75,0x61,0x5D,0xA2,0xC4,0xB5,0xC7,0x44,0x55,0x8A,0x0B,0xA3,0x6E,0x17,0x95,0x21,0xA9,0x0C,0x37,0xCD,0x15,0xBA,0xD4,0x2B,0x6F,0xB3,0x54,0xE4,0xD2,0xC8,0x64,0xBC,0x4C,0x91,0x49,0x12,0xE7,0xB2,0xB1,0xD0,0x22,0x0D,0x9C,0xDD,0xAB,0x62,0xA9,0x38,0x53,0x11,0xA9,0x74,0x2C,0xD2,0xCA,0x59,0x34,0xA3,0xE5,0xFF,0x03};
const uint8_t spTONE1[]     PROGMEM = {0x8D,0xF2,0xDE,0xDD,0xDD,0x93,0x74,0xAA,0x53,0x9D,0xEA,0x54,0xA7,0x3A,0xD5,0xA9,0x4E,0x75,0xAA,0x53,0x9D,0xEA,0x54,0xA7,0x3A,0xD5,0xA9,0x4E,0x75,0xAA,0x53,0x9D,0xEA,0x54,0xA7,0x3A,0xD5,0xA9,0x4E,0x75,0xAA,0x53,0x9D,0xEA,0x54,0xA7,0x3A,0xD5,0xA9,0x4E,0x75,0xAA,0x53,0x9D,0xFA,0x4A,0x26,0x51,0x39,0x79,0x15,0x0A};
const uint8_t spTONE2[]     PROGMEM = {0x4D,0xF1,0xDE,0xDD,0xDD,0x93,0x74,0xA5,0x2B,0x5D,0xE9,0x4A,0x57,0xBA,0xD2,0x95,0xAE,0x74,0xA5,0x2B,0x5D,0xE9,0x4A,0x57,0xBA,0xD2,0x95,0xAE,0x74,0xA5,0x2B,0x5D,0xE9,0x4A,0x57,0xBA,0xD2,0x95,0xAE,0x74,0xA5,0x2B,0x5D,0xE9,0x4A,0x57,0xBA,0xD2,0x95,0xAE,0x74,0xA5,0x2B,0x5D,0xF9,0x11,0x5A};

#define LED_RGB 16 
#define LED_BLUE 2
#define PIN_BUTTON 0
#define PIN_PWM 25
#define PIN_PTT 4

#define LED_COLOR_WHITE 255, 255, 255
#define LED_COLOR_RED 255, 0, 0
#define LED_COLOR_OFF 0, 0, 0
#define LED_COLOR_BLUE 0, 0, 255
#define LED_COLOR_MAGENTA 255, 0, 255
#define LED_COLOR_YELLOW 255, 255, 0
#define LED_COLOR_VIOLET 238, 130, 238

#define LED_COLOR_GREEN_1 0, 50, 0
#define LED_COLOR_GREEN_2 0, 128, 0
#define LED_COLOR_GREEN_3 50, 205, 50
#define LED_COLOR_GREEN_4 0, 255, 0

#define LED_COLOR_YELLOW_1 100, 100, 0
#define LED_COLOR_YELLOW_2 128, 128, 0
#define LED_COLOR_YELLOW_3 205, 205, 50
#define LED_COLOR_YELLOW_4 255, 255, 0

#define LED_COLOR_ORANGE 255, 165, 0
#define LED_COLOR_PINK 255, 105, 180
#define LED_COLOR_RED_3 205, 50, 50

// wifi mananger:
#define USE_DYNAMIC_PARAMETERS      false

// states:
#define STATE_ERROR -1

#define STATE_CONFIGURE 100
#define STATE_CONNECT_WIFI 101
#define STATE_INIT_SPEECH 102
#define STATE_MQTT_CONNECT 103
#define STATE_INIT_NTP 104
#define STATE_MQTT_LOOP 105
#define STATE_CHECK_WIFI_STATUS 106
#define STATE_CHECK_MQTT_STATUS 107
#define STATE_UPDATE_NTP 108
#define STATE_CHECK_NTP_STATUS 109
#define STATE_CHECK_BUTTON 110
#define STATE_BLINK 111
#define STATE_CHECK_SAY_TIME 112
#define STATE_CHECK_SAY_BEEP 113


#define STATE_MQTT_STATUS 1000
#define STATE_EEPROM_SAVE 1010
#define STATE_SAY_TIME 1020
#define STATE_SAY_BEEP 1030

WiFiClient wifiClient;

WiFiManager wifiManager;
WiFiManagerParameter custom_mqtt_server("mqtt_server", "MQTT server");
WiFiManagerParameter custom_mqtt_username("mqtt_username", "MQTT username");
WiFiManagerParameter custom_mqtt_password("mqtt_password", "MQTT password");
WiFiManagerParameter custom_mqtt_server_port("mqtt_server_port", "MQTT server port");
WiFiManagerParameter custom_ntp_server("ntp_server", "NTP server");
WiFiManagerParameter custom_ntp_timeoffset("ntp_timeoffset", "NTP time offset");

WiFiUDP ntpUDP;
NTPClient timeClient(ntpUDP);

Talkie voice;
PubSubClient mqttClient(wifiClient);

Freenove_ESP32_WS2812 rgb_driver = Freenove_ESP32_WS2812(1, LED_RGB, 0, TYPE_GRB);

int State;
int newState;
uint16_t previousSecond;

bool flagConfigured;
bool flagWifiConnected;
bool flagMqttConnected;
bool flagNtpInited;
bool flagSpeechInited;
bool flagNewSecond;

struct eeprom_storage {
  char wifi_ssid[32];
  char wifi_password[32];
  char ntp_server[30];
  int16_t ntp_timeoffset;

  char mqtt_server[30];
  char mqtt_username[30];
  char mqtt_password[30];
  uint16_t mqtt_server_port;

  uint8_t sayTime[24][2];  // sayTime[0][0] == HOUR1, sayTime[0][1] == MINUTE1
  uint8_t sayBeep[24][2];  // sayBeep[0][0] == HOUR1, sayBeep[0][1] == MINUTE1
} eeprom;

void setup() {
  pinMode(LED_BLUE, OUTPUT);
  pinMode(25, INPUT);  // PWM
  pinMode(PIN_BUTTON, INPUT_PULLUP);  // switch
  pinMode(PIN_PTT, OUTPUT);
  digitalWrite(PIN_PTT, HIGH);


  ledBlue(false);

  EEPROM.begin(sizeof(eeprom));
  EEPROM.get(0, eeprom);

  rgb_driver.begin();
  rgb_driver.setBrightness(10);

  Serial.begin(115200);
  Serial.println("");
  for (uint8_t t = 4; t > 0; t--) {
    Serial.println("SETUP: Flush");
    Serial.flush();
    delay(500);
  }

  Serial.println("SETUP: Starting");

  newState = 0;  // used when new state should be set next loop

  flagWifiConnected = false;
  flagMqttConnected = false;
  flagNtpInited = false;
  flagSpeechInited = false;
  flagConfigured = true;
  flagNewSecond = false;

  if ((digitalRead(PIN_BUTTON) == 0) || (eeprom.wifi_ssid[0] == 0xff)) {
    // 0 = pressed, force config
    flagConfigured = false;
  }
}

// Each loop is 100mS
void loop() {

  /*
  Serial.println("DEBUG: State = " + String(State));
  Serial.println("DEBUG: flagConfigured = " + String(flagConfigured));
  Serial.println("DEBUG: flagWifiConnected = " + String(flagWifiConnected));
  Serial.println("DEBUG: flagMqttConnected = " + String(flagMqttConnected));
  Serial.println("DEBUG: flagNtpInited = " + String(flagNtpInited));
  Serial.println("DEBUG: flagSpeechInited = " + String(flagSpeechInited));
  */

  switch(State) {
    case STATE_ERROR:  // error handler
      {
        ledBlue(false);
        Serial.println("");
        Serial.println("ERROR: Restarting in 10 seconds");
        for (uint8_t i = 0; i< 10; i++) {
          ledRGB(LED_COLOR_RED);
          delay(500);
          ledRGB(LED_COLOR_OFF);
          delay(500);
        }
        ESP.restart();
      }
      break;

    case STATE_CONFIGURE:
      {
        if (flagConfigured == false) {
          ledRGB(LED_COLOR_WHITE);
          wifiManager.setTitle("Say time");
          custom_mqtt_server.setValue(eeprom.mqtt_server, 30);
          wifiManager.addParameter(&custom_mqtt_server);
          custom_mqtt_username.setValue(eeprom.mqtt_username, 30);
          wifiManager.addParameter(&custom_mqtt_username);
          custom_mqtt_password.setValue(eeprom.mqtt_password, 30);
          wifiManager.addParameter(&custom_mqtt_password);
          custom_mqtt_server_port.setValue(String(eeprom.mqtt_server_port).c_str(), 5);
          wifiManager.addParameter(&custom_mqtt_server_port);
          custom_ntp_server.setValue(eeprom.ntp_server, 30);
          wifiManager.addParameter(&custom_ntp_server);
          custom_ntp_timeoffset.setValue(String(eeprom.ntp_timeoffset).c_str(), 5);
          wifiManager.addParameter(&custom_ntp_timeoffset);

          wifiManager.setDebugOutput(true, WM_DEBUG_NOTIFY );
          Serial.println("CONFIG: starting portal");
        
          WiFi.begin();
          String ap_name = "configure-";
          ap_name += String(WiFi.macAddress());
          ap_name.replace(":", "");

          wifiManager.setSaveConfigCallback(saveConfigCallback);

          if (!wifiManager.startConfigPortal(ap_name.c_str())) {
            Serial.println("SETUP: failed");
            setState(STATE_ERROR);
          }
          ledRGB(LED_COLOR_OFF);
          delay(250);
          ledRGB(LED_COLOR_GREEN_4);
          delay(500);
          flagConfigured = true;
          flagWifiConnected = true;
        }
      }
      break;

    case STATE_CONNECT_WIFI:  // connecto to wifi
      {
        if (flagWifiConnected == false) {
          Serial.println("Wifi: SSID '" + String(eeprom.wifi_ssid) + "'");
          Serial.println("Wifi: Pwd '" + String(eeprom.wifi_password) + "'");
          Serial.println("Wifi: Connecting");

          WiFi.begin(eeprom.wifi_ssid, eeprom.wifi_password);
          while (WiFi.status() != WL_CONNECTED) {
            ledRGB(LED_COLOR_GREEN_1);
            delay(250);
            ledRGB(LED_COLOR_GREEN_2);
            delay(250);
          }
          ledRGB(LED_COLOR_GREEN_4);
          delay(500);
          Serial.print("Wifi: Connected, IP: ");
          Serial.println(WiFi.localIP());
          ledRGB(LED_COLOR_OFF);
          flagWifiConnected = true;
        }
      }
      break;

    case STATE_INIT_SPEECH:
      if (flagSpeechInited == false) {
        flagSpeechInited = true;
      }
      break;

    case STATE_MQTT_CONNECT:
      {
        if (flagMqttConnected == false) {
          ledRGB(LED_COLOR_YELLOW_1);
          Serial.println("MQTT: '" + String(eeprom.mqtt_server) + "'");
          mqttClient.setServer(eeprom.mqtt_server, eeprom.mqtt_server_port);
          mqttClient.setCallback(mqttCallback);
          String client_id = "topas-";
          client_id += String(WiFi.macAddress());
          client_id.replace(":", "");
          while (!mqttClient.connected()) {
            ledRGB(LED_COLOR_YELLOW_2);
            if (mqttClient.connect(client_id.c_str(), eeprom.mqtt_username, eeprom.mqtt_password)) {
              break;
            } else {
              Serial.println("MQTT: " + String(mqttClient.state()));
              setState(STATE_ERROR);
              break;
            }
            Serial.print(".");
            ledRGB(LED_COLOR_YELLOW_3);
            delay(150);
         }
          delay(250);
          ledRGB(LED_COLOR_YELLOW_4);
          delay(500);

          Serial.println("MQTT: Connected");
          String topic = getTopic("online");
          mqttClient.publish(topic.c_str(), "1");
          // Serial.println("MQTT: Subscribe " + getTopic("command"));
          mqttClient.subscribe(getTopic("command").c_str());
          mqttClient.subscribe(getTopic("command/#").c_str());
          //mqttClient.subscribe(getTopic("command/setTimeOffset").c_str());
          ledRGB(LED_COLOR_OFF);
          flagMqttConnected = true;
        }
      }
      break;

    case STATE_INIT_NTP:
      {
        if (flagNtpInited == false) {
          Serial.println("NTP: init");
          timeClient.begin();
          timeClient.setPoolServerName(eeprom.ntp_server);
          timeClient.setTimeOffset(eeprom.ntp_timeoffset);
        }
      }
      break;

    // ---------------------------------
    // From State 100 is main loop
    // ---------------------------------
    case STATE_MQTT_LOOP:  // read mqtt loop
      mqttClient.loop();   
      break;

    case STATE_CHECK_WIFI_STATUS:  // make sure wifi is connected
      {
        if (flagWifiConnected && WiFi.status() != WL_CONNECTED) {
          Serial.println("Wifi: lost connection");
          setState(STATE_ERROR);
          delay(250);
        }
      }
      break;

    case STATE_CHECK_MQTT_STATUS:
      {
        if (flagMqttConnected && !mqttClient.connected()) {
          flagMqttConnected = false;
          Serial.println("MQTT: lost connection");
          ledRGB(LED_COLOR_YELLOW_3);
          delay(250);
          ledRGB(LED_COLOR_OFF);
        }
      }
      break;

    case STATE_UPDATE_NTP:
      if (timeClient.update()) {
        ledBlue(true);
        delay(150);
        ledBlue(false);
      }
      break;  

    case STATE_CHECK_NTP_STATUS:
      {
        if (timeClient.isTimeSet()) {
          if (!flagNtpInited) {
            setState(STATE_MQTT_STATUS);  // when time change to valid, send to mqtt
            flagNtpInited = true;
          }
        } else {
          timeClient.getSeconds();  // bug with library
        }
      }
      break;

    case STATE_CHECK_BUTTON:
      if (digitalRead(PIN_BUTTON) == 0) {
        // 0 = pressed
        setState(STATE_SAY_TIME);
      }
      break;

    case STATE_BLINK:
      {
        if (flagNtpInited && timeClient.isTimeSet()) {
          if (timeClient.getSeconds() == previousSecond) {
            flagNewSecond = false;
          } else {
            previousSecond = timeClient.getSeconds();
            flagNewSecond = true;

            if (timeClient.getSeconds()%5 == 0) {
              if (flagWifiConnected && flagMqttConnected && flagSpeechInited && flagConfigured && flagNtpInited) {
                // everything good
                ledRGB(LED_COLOR_GREEN_3);
              } else {
                // need initialize
                ledRGB(LED_COLOR_RED_3);
              }
            }
          }
        } else {
          ledRGB(LED_COLOR_BLUE);  // NTP or time not synced
        }
        delay(50);
        ledRGB(LED_COLOR_OFF);
      }
      break;

    case STATE_CHECK_SAY_TIME:
      {
        if (flagNewSecond && timeClient.getSeconds() == 0) {
          for (uint16_t i = 0; i < sizeof(eeprom.sayTime) / (sizeof(uint8_t) * 2); i++) {
            if (timeClient.getHours() == eeprom.sayTime[i][0] && timeClient.getMinutes() == eeprom.sayTime[i][1]) {
              Serial.println("TIME: Time match say time");
              setState(STATE_SAY_TIME);
            }
          }
        }
      }
      break;

    case STATE_CHECK_SAY_BEEP:
      {
        if (flagNewSecond && timeClient.getSeconds() == 0) {
          for (uint16_t i = 0; i < sizeof(eeprom.sayBeep) / (sizeof(uint8_t) * 2); i++) {
            if (timeClient.getHours() == eeprom.sayBeep[i][0] && timeClient.getMinutes() == eeprom.sayBeep[i][1]) {
              Serial.println("TIME: Time match say beep");
              setState(STATE_SAY_BEEP);
            }
          }
        }
      }
      break;

    // ---------------------------------
    // Special states from 1000
    // ---------------------------------

    case STATE_MQTT_STATUS:  // mqtt command "status"
      {
        ledRGB(LED_COLOR_WHITE);
        String topic;
        topic = getTopic("status/ip");
        mqttClient.publish(topic.c_str(), WiFi.localIP().toString().c_str());
        delay(5);
        topic = getTopic("status/ssid");
        mqttClient.publish(topic.c_str(), wifiManager.getWiFiSSID().c_str());
        delay(5);
        topic = getTopic("status/time_set");

        if (timeClient.isTimeSet()) {
          mqttClient.publish(topic.c_str(), "1");
        } else {
          mqttClient.publish(topic.c_str(), "0");
        }
        delay(5);
        topic = getTopic("status/time");
        mqttClient.publish(topic.c_str(), timeClient.getFormattedTime().c_str());
        delay(5);
        topic = getTopic("status/timeOffset");
        mqttClient.publish(topic.c_str(), String(eeprom.ntp_timeoffset).c_str());

        for (uint16_t i = 0; i < sizeof(eeprom.sayTime) / (sizeof(uint8_t) * 2); i++) {
          topic = getTopic("status/sayTime_" + String(i));
          String hour = String(eeprom.sayTime[i][0]);
          String minute = String(eeprom.sayTime[i][1]);
          if (eeprom.sayTime[i][0] == 0xff || eeprom.sayTime[i][1] == 0xff) {
            hour = "-";
            minute = "-";
          }
          String timeStr = hour + ":" + minute;
          mqttClient.publish(topic.c_str(), timeStr.c_str());
          delay(5);
        }

        for (uint16_t i = 0; i < sizeof(eeprom.sayBeep) / (sizeof(uint8_t) * 2); i++) {
          topic = getTopic("status/sayBeep_" + String(i));
          String hour = String(eeprom.sayBeep[i][0]);
          String minute = String(eeprom.sayBeep[i][1]);
          if (eeprom.sayBeep[i][0] == 0xff || eeprom.sayBeep[i][1] == 0xff) {
            hour = "-";
            minute = "-";
          }
          String timeStr = hour + ":" + minute;
          mqttClient.publish(topic.c_str(), timeStr.c_str());
          delay(5);
        }

        ledRGB(LED_COLOR_OFF);
      }
      break;
    
    case STATE_EEPROM_SAVE:  // save eeprom
      Serial.println("EEPROM: Saving");
      ledRGB(LED_COLOR_WHITE);
      EEPROM.put(0, eeprom);
      delay(250);
      EEPROM.commit();

      // reload ntp timeOffset
      timeClient.setTimeOffset(eeprom.ntp_timeoffset);

      ledRGB(LED_COLOR_OFF);
      delay(250);
      break;

    case STATE_SAY_TIME:
      {
        ledRGB(LED_COLOR_PINK);
        pinMode(PIN_PWM, OUTPUT);
        digitalWrite(PIN_PTT, LOW);
        delay(1000);

        voice.say(spTHE);
        voice.say(spTIME);
        voice.say(spIS);
        sayDigit(timeClient.getHours());

        if (timeClient.getMinutes() != 0) {
          sayDigit(timeClient.getMinutes());
        }

        digitalWrite(PIN_PTT, HIGH);
        pinMode(PIN_PWM, INPUT);
        ledRGB(LED_COLOR_OFF);
      }
      break;

  
    case STATE_SAY_BEEP:
      {
        ledRGB(LED_COLOR_PINK);
        pinMode(PIN_PWM, OUTPUT);
        digitalWrite(PIN_PTT, LOW);
        delay(1000);

        voice.say(spTONE1);

        digitalWrite(PIN_PTT, HIGH);
        pinMode(PIN_PWM, INPUT);
        ledRGB(LED_COLOR_OFF);
      }
      break;

    default:  // always default to state 100
      setState(100);
      break;
  }

  // End loop
  delay(5);
 
  // Iterate state or set new state
  State = State + 1;
  if (newState != 0) {
    State = newState;
    newState = 0;
  }
}

void setState(int s) {
  newState = s;  // next loop, new state will be set
}

void sayDigit(int digit) {
    Serial.print("Say: ");
    Serial.print(digit);
    Serial.print("\n");

    switch (digit) {
    case 0:
      voice.say(spTWENTY);
      voice.say(spFOUR);
      break;
    case 1:
      voice.say(spONE);
      break;
    case 2:
      voice.say(spTWO);
      break;
    case 3:
      voice.say(spTHREE);
      break;
    case 4:
      voice.say(spFOUR);
      break;
    case 5:
      voice.say(spFIVE);
      break;
    case 6:
      voice.say(spSIX);
      break;
    case 7:
      voice.say(spSEVEN);
      break;
    case 8:
      voice.say(spEIGHT);
      break;
    case 9:
      voice.say(spNINE);
      break;
    case 10:
      voice.say(spTEN);
      break;
    case 11:
      voice.say(spELEVEN);
      break;
    case 12:
      voice.say(spTWELVE);
      break;
    case 13:
      voice.say(spTHIRTEEN);
      break;
    case 14:
      voice.say(spFOURTEEN);
      break;
    case 15:
      voice.say(spFIFTEEN);
      break;
    case 16:
      voice.say(spSIXTEEN);
      break;
    case 17:
      voice.say(spSEVENTEEN);
      break;
    case 18:
      voice.say(spEIGHTEEN);
      break;
    case 19:
      voice.say(spNINETEEN);
      break;
  }
  if (digit >= 20 and digit < 30) {
    voice.say(spTWENTY);
  }
  if (digit >= 30 and digit < 40) {
    voice.say(spTHIRTY);
  }
  if (digit >= 40 and digit < 50) {
    voice.say(spFOURTY);
  }
  if (digit >= 50 and digit < 60) {
    voice.say(spFIFTY);
  }
  if (digit >= 20) {
    int halv_digit = digit % 10;
    if (halv_digit > 0) {
      sayDigit(halv_digit);
    }
  }
}

void ledRGB(uint8_t r, uint8_t g, uint8_t b) {
  rgb_driver.setLedColorData(0, r, g, b);
	rgb_driver.show();   // Send color data to LED
}

void ledBlue(bool state) {
  if (state) {
    digitalWrite(LED_BLUE, HIGH);
  } else {
    digitalWrite(LED_BLUE, LOW);
  }
}

String getTopic(String t) {
  String topic = "say_time/";
  topic += String(WiFi.macAddress());
  topic.replace(":", "");
  topic = topic + "/" + t;
  return topic;
}

void mqttCallback(char* t, byte* payload, unsigned int length) {
  String buff = "";
  String topic = t;

  for (size_t i = 0; i < length; i++) {
    buff.concat((char)payload[i]);
  }

  Serial.println("MQTT: Topic: " + topic);
  Serial.println("MQTT: Received: " + buff);

  if (String(topic).endsWith("command")) {
    if (buff.equals("status")) {
      setState(STATE_MQTT_STATUS);
    }
    if (buff.equals("restart")) {
      setState(STATE_ERROR);
    }
    if (buff.equals("say")) {
      setState(STATE_SAY_TIME);
    }
  }

  if (topic.endsWith("setTimeOffset")) {
    eeprom.ntp_timeoffset = buff.toInt();
    setState(STATE_EEPROM_SAVE);
  }

  String subTopic = topic.substring(topic.lastIndexOf("/") + 1);

  if (subTopic.startsWith("setSayTime_")) {
    uint16_t new_time_hours = String(buff.substring(0, 2)).toInt();
    uint16_t new_time_minutes = String(buff.substring(3, 5)).toInt();
    uint8_t i = subTopic.substring(subTopic.indexOf("_") + 1).toInt();
    eeprom.sayTime[i][0] = new_time_hours;
    eeprom.sayTime[i][1] = new_time_minutes;    
    setState(STATE_EEPROM_SAVE);
  }

  if (subTopic.startsWith("setSayBeep_")) {
    uint16_t new_time_hours = String(buff.substring(0, 2)).toInt();
    uint16_t new_time_minutes = String(buff.substring(3, 5)).toInt();
    uint8_t i = subTopic.substring(subTopic.indexOf("_") + 1).toInt();
    eeprom.sayBeep[i][0] = new_time_hours;
    eeprom.sayBeep[i][1] = new_time_minutes;    
    setState(STATE_EEPROM_SAVE);
  }
}

void saveConfigCallback () {
  Serial.println("CONFIG: Save config");

  Serial.println("CONFIG: ssid " + wifiManager.getWiFiSSID());
  strncpy(eeprom.wifi_ssid, wifiManager.getWiFiSSID().c_str(), 32);

  Serial.println("CONFIG: pwd " + wifiManager.getWiFiPass());
  strncpy(eeprom.wifi_password, wifiManager.getWiFiPass().c_str(), 32);

  Serial.println("CONFIG: MQTT server " + String(custom_mqtt_server.getValue()));
  strncpy(eeprom.mqtt_server, custom_mqtt_server.getValue(), 30);

  Serial.println("CONFIG: MQTT username " + String(custom_mqtt_username.getValue()));
  strncpy(eeprom.mqtt_username, custom_mqtt_username.getValue(), 30);

  Serial.println("CONFIG: MQTT password " + String(custom_mqtt_password.getValue()));
  strncpy(eeprom.mqtt_password, custom_mqtt_password.getValue(), 30);

  Serial.println("CONFIG: MQTT port " + String(custom_mqtt_server_port.getValue()));
  eeprom.mqtt_server_port = String(custom_mqtt_server_port.getValue()).toInt();

  Serial.println("CONFIG: NTP server " + String(custom_ntp_server.getValue()));
  strncpy(eeprom.ntp_server, custom_ntp_server.getValue(), 30);

  Serial.println("CONFIG: NTP timeoffset " + String(custom_ntp_timeoffset.getValue()));
  eeprom.ntp_timeoffset = String(custom_ntp_timeoffset.getValue()).toInt();

  flagNtpInited = false;  // reinit

  setState(STATE_EEPROM_SAVE);
}
